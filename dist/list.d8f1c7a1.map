{"version":3,"sources":["list.js"],"names":["createNode","value","data","next","createList","appendList","list","node","x","removeFromList","p","travelList","fn","node2","node3","node4","console","log","setInterval"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC1B,WAAO;AACHC,cAAMD,KADH;AAEHE,cAAM;AAFH,KAAP;AAIH,CALD;;AAOA,IAAMC,aAAa,SAAbA,UAAa,CAACH,KAAD,EAAW;AAC1B,WAAOD,WAAWC,KAAX,CAAP;AACH,CAFD;AAGA,IAAMI,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOL,KAAP,EAAiB;AAChC,QAAMM,OAAOP,WAAWC,KAAX,CAAb;AACA,QAAIO,IAAIF,IAAR;AACA,WAAOE,EAAEL,IAAT,EAAe;AACXK,YAAIA,EAAEL,IAAN;AACH;AACD;AACAK,MAAEL,IAAF,GAASI,IAAT;AACA,WAAOA,IAAP;AACH,CATD;;AAWA,IAAME,iBAAiB,SAAjBA,cAAiB,CAACH,IAAD,EAAOC,IAAP,EAAgB;AAAE;AACrC;AACA,QAAIC,IAAIF,IAAR;AACA,QAAII,IAAIH,IAAR;AACA,WAAOC,MAAMD,IAAN,IAAcC,MAAM,IAA3B,EAAiC;AAAE;AAC/BE,YAAIF,CAAJ;AACAA,YAAIA,EAAEL,IAAN;AACH;AACD,QAAIK,MAAM,IAAV,EAAgB;AACZ,eAAO,KAAP;AACH,KAFD,MAEO,IAAIA,MAAME,CAAV,EAAa;AAChBA,YAAIF,EAAEL,IAAN;AACA,eAAOO,CAAP,CAFgB,CAEP;AACZ,KAHM,MAGA;AACHA,UAAEP,IAAF,GAASK,EAAEL,IAAX;AACA,eAAOG,IAAP;AACH;AACJ,CAjBD;AAkBA,IAAMK,aAAa,SAAbA,UAAa,CAACL,IAAD,EAAOM,EAAP,EAAc;AAC7B,QAAIJ,IAAIF,IAAR;AACA,WAAOE,MAAM,IAAb,EAAmB;AACfI,WAAGJ,CAAH;AACAA,YAAIA,EAAEL,IAAN;AACH;AACJ,CAND;;AASA,IAAMG,OAAOF,WAAW,EAAX,CAAb;AACA,IAAMS,QAAQR,WAAWC,IAAX,EAAiB,EAAjB,CAAd;AACA,IAAMQ,QAAQT,WAAWC,IAAX,EAAiB,EAAjB,CAAd;AACA,IAAMS,QAAQV,WAAWC,IAAX,EAAiB,EAAjB,CAAd;AACA;AACAK,WAAWL,IAAX,EAAiB,gBAAQ;AACrBU,YAAQC,GAAR,CAAYV,KAAKL,IAAjB;AACH,CAFD;AAGAgB;AACA;AACA","file":"list.d8f1c7a1.map","sourceRoot":"..\\src","sourcesContent":["const createNode = (value) => {\r\n    return {\r\n        data: value,\r\n        next: null\r\n    }\r\n};\r\n\r\nconst createList = (value) => {\r\n    return createNode(value);\r\n};\r\nconst appendList = (list, value) => {\r\n    const node = createNode(value);\r\n    let x = list;\r\n    while (x.next) {\r\n        x = x.next;\r\n    }\r\n    // x.next === null ,x是最后一个节点\r\n    x.next = node;\r\n    return node;\r\n};\r\n\r\nconst removeFromList = (list, node) => { //通过遍历找当前节点的上一个节点\r\n    debugger;\r\n    let x = list;\r\n    let p = node;\r\n    while (x !== node && x !== null) { //确保node在list中且不为null\r\n        p = x;\r\n        x = x.next;\r\n    }\r\n    if (x === null) {\r\n        return false;\r\n    } else if (x === p) {\r\n        p = x.next;\r\n        return p // 如果删除的是第一个节点，返回新list的头节点\r\n    } else {\r\n        p.next = x.next;\r\n        return list\r\n    }\r\n};\r\nconst travelList = (list, fn) => {\r\n    let x = list;\r\n    while (x !== null) {\r\n        fn(x);\r\n        x = x.next;\r\n    }\r\n};\r\n\r\n\r\nconst list = createList(10);\r\nconst node2 = appendList(list, 20);\r\nconst node3 = appendList(list, 30);\r\nconst node4 = appendList(list, 40);\r\n// removeFromList(list, node3);\r\ntravelList(list, node => {\r\n    console.log(node.data)\r\n});\r\nsetInterval\r\n// console.log('list');\r\n// console.log(list);"]}